#########################################################################
# Title:         Community: Settings | Settings Updater                 #
# Author(s):     l3uddz, desimaniac, Migz93                             #
# URL:           https://github.com/Cloudbox/Community                  #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Community Settings Updater Block
  block:

  # Check for and import settings files.
  - name: "Check if '{{ item }}' exists."
    stat:
      path: "{{ playbook_dir }}/{{ item }}"
    register: file0

  - name: "Copy '{{ item }}.default' to '{{ item }}'."
    copy:
      src: "{{ playbook_dir }}/defaults/{{ item }}.default"
      dest: "{{ playbook_dir }}/{{ item }}"
      owner: "{{ community_yml.stat.uid }}"
      group: "{{ community_yml.stat.gid }}"
      mode: 0664
      force: yes
    when: not file0.stat.exists

  # Decryption Tasks
  - name: Decryption Block
    block:

    - name: "Check '{{ item }}' for encryption."
      shell: "head -1 {{ item }} | grep -q \\$ANSIBLE_VAULT"
      register: encryption_check
      ignore_errors: yes
      failed_when: encryption_check.rc > 1

    - name: "Set 'file_is_encrypted' variable."
      set_fact:
        file_is_encrypted: "{{ ((encryption_check.rc == 0) | default(false,true)) }}"

    - name: "Decrypt '{{ item }}' when encrypted."
      shell: "ansible-vault decrypt {{ item }}"
      become: yes
      become_user: "{{ community_yml.stat.pw_name }}"
      when: file_is_encrypted

    when: file0.stat.exists

  # settings-updater.py tasks
  - name: "Run 'settings-updater.py' for '{{ item }}'."
    script: "roles/settings/files/settings-updater.py '{{ playbook_dir }}' 'defaults/{{ item }}.default' '{{ item }}'"
    become: yes
    become_user: "{{ community_yml.stat.pw_name }}"
    register: settings_updater
    ignore_errors: yes
    failed_when: settings_updater.rc == 1

  - name: Build 'files_updated_successfully' list
    set_fact:
      files_updated_successfully: "{{ files_updated_successfully }} + [ '{{ item }}' ]"
    when: settings_updater.rc == 2

  - name: Build 'files_updated_unsuccessfully' list
    set_fact:
      files_updated_unsuccessfully: "{{ files_updated_unsuccessfully }} + [ '{{ item }}' ]"
    when: settings_updater.rc == 1

  - name: Set 'exit_is_necessary' variable
    set_fact:
      exit_is_necessary: true
    when: (settings_updater.rc == 2) or (settings_updater.rc == 1)

  always:
  - name: "Re-encrypt '{{ item }}' if previously encrypted."
    shell: "ansible-vault encrypt {{ item }}"
    become: yes
    become_user: "{{ community_yml.stat.pw_name }}"
    when: file0.stat.exists and file_is_encrypted
